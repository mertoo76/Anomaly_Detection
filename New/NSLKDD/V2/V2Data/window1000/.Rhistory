t[100]
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[(i*100)+1:(100*(i+1)),j]
#print("x1")
t=seq(100*i*2,(100*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 2)
#print("x3")
x[((j*2) -2):((j*2)),(i*100):((i*100)+100)] = t(res$imf)
#print("x4")
i=i+1
#print("x5")
}
}
x_prep[(i*100)+1:(100*(i+1)),j]
(i*100)+1
(100*(i+1))
s=x_prep[(i*100)+1:(100*(i+1)),j]
x_prep[101:200]
x_prep[1:10]
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*100)+1):(100*(i+1)),j]
#print("x1")
t=seq(100*i*2,(100*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 2)
#print("x3")
x[((j*2) -2):((j*2)),(i*100):((i*100)+100)] = t(res$imf)
#print("x4")
i=i+1
#print("x5")
}
}
x[((j*2) -2):((j*2)),(i*100):((i*100)+100)]
((i*100)+100)
x[((j*2) -2):((j*2)),((i*100)+1):((i*100)+100)]
# Clear the workspace
rm( list = ls() )
library(EMD)
library(data.table)
library(dplyr)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*100)+1):(100*(i+1)),j]
#print("x1")
t=seq(100*i*2,(100*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 2)
#print("x3")
x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
#print("x4")
i=i+1
#print("x5")
}
}
x[400:1]
x[400,1]
x_prep[400,1]
x_prep[401,1]
x_prep[402,1]
x_prep[403,1]
x_prep[((i*100)+1):(100*(i+1)),j]
x_prep[((i*100)+1):(100*(i+1)),j]
((i*100)+1)
(100*(i+1))
x_prep[(100*(i))]
x_prep[(100*(i))+1]
mat <- cbind(res$residue,res$residue)
View(mat)
View(mat)
library(EMD)
library(data.table)
library(dplyr)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*100)+1):(100*(i+1)),j]
#print("x1")
t=seq(100*i*2,(100*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 1)
#print("x3")
mat <- cbind(res$imf,res$residue)
#x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(mat)
#print("x4")
i=i+1
#print("x5")
}
}
View(x)
X1 <-x
x <-t(x)
str(x)
newLen=i*100
x[493900,0]
x[493900,1]
x[493901,1]
x[1:newLen]
str(x1)
str(X1)
sil=x[1:newlen]
sil=x[1:newlen,]
sil=x[1:newLen]
str(sil)
sil=x[1:newLen,]
str(sil)
View(sil)
View(sil)
x=x[1:newLen,]
str(x)
library(RcppCNPy)
install.packages('RcppCNPy')
library(RcppCNPy)
npySave("xData.npy", x)
getwd
getwd()
setwd('C:/Users/user/Desktop/ACN/scientific_Project/Github/Anomaly_Detection/New/KDD10Percentage/V2/DataV2/window1000')
ls
getSrcFilename()
rm( list = ls() )
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/1000)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*1000)+1):(1000*(i+1)),j]
#print("x1")
t=seq(1000*i*2,(1000*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 1)
#print("x3")
mat <- cbind(res$imf,res$residue)
#x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
x[((j*2) -1):((j*2)),((i*1000)+1):((i*1000)+1000)] = t(mat)
#print("x4")
i=i+1
#print("x5")
}
}
X1 <-x
x <-t(x)
newLen=i*1000
x=x[1:newLen,]
npySave("xData.npy", x)
str(x)
getwd
getwd()
setwd("C:/Users/user/Desktop/ACN/scientific_Project/Github/Anomaly_Detection/New/KDD10Percentage/V2/DataV2/testData")
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
View(data)
rm( list = ls() )
data<-read.csv("../../../Data/corrected", stringsAsFactors = FALSE)
View(data)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*100)+1):(100*(i+1)),j]
#print("x1")
t=seq(100*i*2,(100*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 1)
#print("x3")
mat <- cbind(res$imf,res$residue)
#x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(mat)
#print("x4")
i=i+1
#print("x5")
}
}
X1 <-x
x <-t(x)
newLen=i*100
x=x[1:newLen,]
npySave("xData.npy", x)
getwd()
setwd("C:/Users/user/Desktop/ACN/scientific_Project/Github/Anomaly_Detection/New/NSLKDD/V2/DataV2/window100")
setwd("C:/Users/user/Desktop/ACN/scientific_Project/Github/Anomaly_Detection/New/NSLKDD/V2/V2Data/window100")
# Clear the workspace
rm( list = ls() )
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/KDDTrain+.csv", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
View(data)
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*100)+1):(100*(i+1)),j]
#print("x1")
t=seq(100*i*2,(100*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 1)
#print("x3")
mat <- cbind(res$imf,res$residue)
#x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(mat)
#print("x4")
i=i+1
#print("x5")
}
}
X1 <-x
x <-t(x)
newLen=i*100
x=x[1:newLen,]
npySave("xData.npy", x)
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/KDDTest+.csv", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*100)+1):(100*(i+1)),j]
#print("x1")
t=seq(100*i*2,(100*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 1)
#print("x3")
mat <- cbind(res$imf,res$residue)
#x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(mat)
#print("x4")
i=i+1
#print("x5")
}
}
X1 <-x
x <-t(x)
newLen=i*100
x=x[1:newLen,]
npySave("xDataTest.npy", x)
getwd()
setwd( "C:/Users/user/Desktop/ACN/scientific_Project/Github/Anomaly_Detection/New/KDD10Percentage/V2/V2Data/testData")
setwd( "C:/Users/user/Desktop/ACN/scientific_Project/Github/Anomaly_Detection/New/KDD10Percentage/V2/DataV2/testData")
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/1000)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*1000)+1):(1000*(i+1)),j]
#print("x1")
t=seq(1000*i*2,(1000*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 1)
#print("x3")
mat <- cbind(res$imf,res$residue)
#x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
x[((j*2) -1):((j*2)),((i*1000)+1):((i*1000)+1000)] = t(mat)
#print("x4")
i=i+1
#print("x5")
}
}
X1 <-x
x <-t(x)
newLen=i*1000
x=x[1:newLen,]
npySave("xDataTestW1000.npy", x)
getwd()
setwd()
setwd("C:/Users/user/Desktop/ACN/scientific_Project/Github/Anomaly_Detection/New/NSLKDD10/V2/V2Dataa/window1000")
setwd("C:/Users/user/Desktop/ACN/scientific_Project/Github/Anomaly_Detection/New/NSLKDD10/V2/V2Data/window1000")
setwd("C:/Users/user/Desktop/ACN/scientific_Project/Github/Anomaly_Detection/New/NSLKDD/V2/V2Data/window1000")
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
getwd()
data<-read.csv("../../../Data/KDDTrain+.csv", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/1000)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*1000)+1):(1000*(i+1)),j]
#print("x1")
t=seq(1000*i*2,(1000*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 1)
#print("x3")
mat <- cbind(res$imf,res$residue)
#x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
x[((j*2) -1):((j*2)),((i*1000)+1):((i*1000)+1000)] = t(mat)
#print("x4")
i=i+1
#print("x5")
}
}
X1 <-x
x <-t(x)
newLen=i*1000
x=x[1:newLen,]
npySave("xData.npy", x)
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/KDDTest+.csv", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/1000)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
for (j in 1:ncol(x_prep)){
i=0
print(j)
while ( i<window){
s=x_prep[((i*1000)+1):(1000*(i+1)),j]
#print("x1")
t=seq(1000*i*2,(1000*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 1)
#print("x3")
mat <- cbind(res$imf,res$residue)
#x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
x[((j*2) -1):((j*2)),((i*1000)+1):((i*1000)+1000)] = t(mat)
#print("x4")
i=i+1
#print("x5")
}
}
X1 <-x
x <-t(x)
newLen=i*1000
x=x[1:newLen,]
npySave("xDataTest.npy", x)
