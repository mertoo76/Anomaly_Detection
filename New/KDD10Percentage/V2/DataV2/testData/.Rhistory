setwd('C:\\Users\\user\\Desktop\\ACN\\scientific_Project\\Github\\Wadjet\\AnomalyDetection\\Data\\Spine4')
getwd()
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("merged.csv", stringsAsFactors = FALSE)
x_prep=as.matrix(data)
for (j in 2:ncol(x_prep)){
print(j)
res <- emd(xt=x_prep[,j],
tt=data$ts.V1, max.imf = 1)
#print("x3")
#mat <- cbind(res$imf,res$residue)
an.error.occured <- FALSE
tryCatch( { x[,j] = res$imf }
, error = function(e) {an.error.occured <<- TRUE})
}
#x <- cbind(data$ts.V1,x)
xDataFrame <- as.data.frame(x)
#names(xDataFrame) <- colnames( data )
#write.csv(x, file = "xData.csv", col.names = colnames( data ))
write.table( xDataFrame,file = "xData.csv", sep=",",  col.names=TRUE, row.names = FALSE)
copy<-read.csv("xData.csv", stringsAsFactors = FALSE)
x <- cbind(data$ts.V1,x)
x
x = x_prep
# Clear the workspace
rm( list = ls() )
data<-read.csv("merged.csv", stringsAsFactors = FALSE)
x_prep=as.matrix(data)
#x_prep=x_prep[1:nrow(x_prep),2:ncol(x_prep)]
#x=matrix(0L, nrow=nrow(x_prep), ncol = 2*(ncol(x_prep)-1))
x = x_prep
for (j in 2:ncol(x_prep)){
print(j)
res <- emd(xt=x_prep[,j],
tt=data$ts.V1, max.imf = 1)
#print("x3")
#mat <- cbind(res$imf,res$residue)
an.error.occured <- FALSE
tryCatch( { x[,j] = res$imf }
, error = function(e) {an.error.occured <<- TRUE})
}
#x <- cbind(data$ts.V1,x)
xDataFrame <- as.data.frame(x)
#names(xDataFrame) <- colnames( data )
#write.csv(x, file = "xData.csv", col.names = colnames( data ))
write.table( xDataFrame,file = "xData.csv", sep=",",  col.names=TRUE, row.names = FALSE)
copy<-read.csv("xData.csv", stringsAsFactors = FALSE)
View(copy)
View(copy)
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("merged.csv", stringsAsFactors = FALSE)
x_prep=as.matrix(data)
#x_prep=x_prep[1:nrow(x_prep),2:ncol(x_prep)]
#x=matrix(0L, nrow=nrow(x_prep), ncol = 2*(ncol(x_prep)-1))
x = x_prep
for (j in 2:ncol(x_prep)){
print(j)
res <- emd(xt=x_prep[,j],
tt=data$ts.V1, max.imf = 1)
#print("x3")
#mat <- cbind(res$imf,res$residue)
an.error.occured <- FALSE
tryCatch( { x[,j] = res$imf }
, error = function(e) {an.error.occured <<- TRUE})
}
getwd()
setwd("C:/Users/user/Desktop/ACN/scientific_Project/Github/Wadjet/AnomalyDetection/Data/Test/Spine4")
getwd()
# Clear the workspace
rm( list = ls() )
data<-read.csv("merged.csv", stringsAsFactors = FALSE)
x_prep=as.matrix(data)
#x_prep=x_prep[1:nrow(x_prep),2:ncol(x_prep)]
#x=matrix(0L, nrow=nrow(x_prep), ncol = 2*(ncol(x_prep)-1))
x = x_prep
for (j in 2:ncol(x_prep)){
print(j)
res <- emd(xt=x_prep[,j],
tt=data$ts.V1, max.imf = 1)
#print("x3")
#mat <- cbind(res$imf,res$residue)
an.error.occured <- FALSE
tryCatch( { x[,j] = res$imf }
, error = function(e) {an.error.occured <<- TRUE})
}
#x <- cbind(data$ts.V1,x)
xDataFrame <- as.data.frame(x)
#names(xDataFrame) <- colnames( data )
#write.csv(x, file = "xData.csv", col.names = colnames( data ))
write.table( xDataFrame,file = "xData.csv", sep=",",  col.names=TRUE, row.names = FALSE)
getwd()
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("merged.csv", stringsAsFactors = FALSE)
x_prep=as.matrix(data)
#x_prep=x_prep[1:nrow(x_prep),2:ncol(x_prep)]
#x=matrix(0L, nrow=nrow(x_prep), ncol = 2*(ncol(x_prep)-1))
x = x_prep
res <- emd(xt=x_prep,
tt=data$ts.V1, max.imf = 1)
setwd('C:\\Users\\user\\Desktop\\ACN\\scientific_Project\\Github\\Anomaly_Detection\\New\\KDD10Percentage\\V2\\DataV2\\window100')
# Clear the workspace
rm( list = ls() )
data <- npyLoad("xData.npy")
str(data)
data.matrix()
length(data)
nrow(data)
t=seq(0,(2*nrow(data)),2)
str(t)
t=seq(0,(2*nrow(data))-1,2)
str(t)
t=seq(1,(2*nrow(data))-1,2)
str(t)
t=seq(2,8,2)
View(data)
View(data)
t=seq(1,8,2)
View(data)
data[:,t]
data[:,1]
data[20,2]
data[:nrow(data),2]
View(data)
select(data, V1, V3, V5, V7)
data[,c("V1","V3","V5","V7")]
data[2,2]
data[1:nrow(data),t]
IMF=data[1:nrow(data),t]
View(IMF)
View(data)
test1 <- hilbertspec(IMF)
spectrogram(test1$amplitude[,1], test1$instantfreq[,1])
test1$instantfreq[,1]
spectrogram(test1$amplitude[,1], test1$instantfreq[,1])
spectrogram(test1$amplitude[:100,1], test1$instantfreq[:100,1])
spectrogram(test1$amplitude[1:100,1], test1$instantfreq[1:100,1])
test1$instantfreq
str(test1$instantfreq)
sil=test1$instantfreq
View(sil)
npySave("instantFreq.npy", test1$instantfreq)
setwd('C:\\Users\\user\\Desktop\\ACN\\scientific_Project\\Github\\Anomaly_Detection\\New\\KDD10Percentage\\V2\\DataV2\\testData')
# Clear the workspace
rm( list = ls() )
data <- npyLoad("xDataTest.npy")
t=seq(1,(2*nrow(data))-1,2)
t=seq(1,8,2)
IMF=data[1:nrow(data),t]
test1 <- hilbertspec(IMF)
#spectrogram(test1$amplitude[1:100,1], test1$instantfreq[1:100,1])
npySave("instantFreq.npy", test1$instantfreq)
