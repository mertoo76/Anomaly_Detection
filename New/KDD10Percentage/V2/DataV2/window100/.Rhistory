confMatrix <- table(tahmin, testData$ngh)
library(caret)
confusionMatrix(confMatrix)
####################################################
#postneonaatal#####
postneo <- dbGetQuery(con, "SELECT igg,ggt,lt,tp,alb,bw,twin,gender,farm,ah,perity,wgpn,mdgn,pngh from kanafter,kuzu,anne,postneonatal where kuzu.lambno=kanafter.kno and kuzu.ano=anne.no and kuzu.lambno=postneonatal.kno")
ind1 = sample(2, nrow(postneo), replace = TRUE, prob=c(0.7, 0.3))
trainData1 = postneo[ind1 == 1,]
testData1 = postneo[ind1 == 2,]
trainData1$pngh <- as.factor(x=trainData1$pngh)
trainData1$pngh <- revalue(trainData1$pngh,  c("FALSE"="Healthy", "TRUE"="ill"))
trainData1$ah <- as.factor(x=trainData1$ah)
trainData1$ah <- revalue(trainData1$ah, c("FALSE"="Healthy", "TRUE"="ill"))
trainData1$twin <- as.factor(x=trainData1$twin)
trainData1$twin <- revalue(trainData1$twin, c("FALSE"="twin", "TRUE"="single"))
trainData1$gender <- as.factor(x=trainData1$gender)
trainData1$gender <- revalue(trainData1$gender, c("FALSE"="Male", "TRUE"="Female"))
trainData1$farm <- as.factor(x=trainData1$farm)
trainData1$farm <- revalue(trainData1$farm, c("1"="Farm2"))
#-----Test data
testData1$pngh <- as.factor(x=testData1$pngh)
testData1$pngh <- revalue(testData1$pngh,  c("FALSE"="Healthy", "TRUE"="ill"))
testData1$ah <- as.factor(x=testData1$ah)
testData1$ah <- revalue(testData1$ah, c("FALSE"="Healthy", "TRUE"="ill"))
testData1$twin <- as.factor(x=testData1$twin)
testData1$twin <- revalue(testData1$twin, c("FALSE"="twin", "TRUE"="single"))
testData1$gender <- as.factor(x=testData1$gender)
testData1$gender <- revalue(testData1$gender, c("FALSE"="Male", "TRUE"="Female"))
testData1$farm <- as.factor(x=testData1$farm)
testData1$farm <- revalue(testData1$farm, c( "1"="Farm2"))
m2 <- J48(trainData1$pngh~., data = trainData1)
summary(m2);
tahmin1 <- predict(m2, testData1, type="class")
table(testData1$pngh, tahmin1)
confMatrix1 <- table(tahmin1, testData1$pngh)
confusionMatrix(confMatrix1)
######################################################
jpeg(filename="C:/Users/user/Desktop/Nodejs/examples/database/tree.jpg")
# plot(m1, margin=0.1)
plot(m1, type="simple")
dev.off()
jpeg(filename="C:/Users/user/Desktop/Nodejs/examples/database/posttree.jpg")
# plot(m2, margin=0.1)
plot(m2, type="simple")
dev.off()
body <- sprintf("Neonatal Dönem %s\nPostneonatal %s",summary(m1),summary(m2))
#      sprintf("%s\n %s",summary(m1),summary(m2))
##işlemlerr
#body <- toJSON(table(predict(iris_ctree), trainData$ngh),rnorm(2))# table için doğru sonuç döndü
}
ret <- list(status=status,
headers=headers,
body=body)
return(ret)
})
message("Starting server...")
server <- startServer("0.0.0.0", 8080, app=app) #127.0.0.1
on.exit(stopServer(server))
while(TRUE) {
service()
Sys.sleep(0.001)
}
stopServer(server)
rm(list = ls())
# server  #
library(httpuv)
library(RCurl)
library(httr)
## Veritabanı bağlantı
require("RPostgreSQL")
pw <- {
"6378"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "KuzuBase",
host = "localhost", port = 5432,
user = "postgres", password = 6378)
##
app <- list(call=function(req) {
query <- req$QUERY_STRING
qs <- httr:::parse_query(gsub("^\\?", "", query))
status <- 200L
headers <- list('Content-Type' = 'application/json')
if (!is.character(query) || identical(query, "")) {
## işlemler
df_postgres <- dbGetQuery(con, "SELECT igg,ggt,lt,tp,alb,bw,twin,gender,farm,ah,perity,wg28,mdg28,ngh from kanafter,kuzu,anne,neonatal where kuzu.lambno=kanafter.kno and kuzu.ano=anne.no and kuzu.lambno=neonatal.kno")
#####################################################
ind = sample(2, nrow(df_postgres), replace = TRUE, prob=c(0.7, 0.3))
trainData = df_postgres[ind == 1,]
testData = df_postgres[ind == 2,]
# numerik dısındakiler frame olarak tanimlanir
library(plyr)
trainData$ngh <- as.factor(x=trainData$ngh)
trainData$ngh <- revalue(trainData$ngh,  c("FALSE"="Healthy", "TRUE"="ill"))
trainData$ah <- as.factor(x=trainData$ah)
trainData$ah <- revalue(trainData$ah, c("FALSE"="Healthy", "TRUE"="ill"))
trainData$twin <- as.factor(x=trainData$twin)
trainData$twin <- revalue(trainData$twin, c("FALSE"="twin", "TRUE"="single"))
trainData$gender <- as.factor(x=trainData$gender)
trainData$gender <- revalue(trainData$gender, c("FALSE"="Male", "TRUE"="Female"))
trainData$farm <- as.factor(x=trainData$farm)
trainData$farm <- revalue(trainData$farm, c("1"="Farm2"))
#-----Test data
testData$ngh <- as.factor(x=testData$ngh)
testData$ngh <- revalue(testData$ngh,  c("FALSE"="Healthy", "TRUE"="ill"))
testData$ah <- as.factor(x=testData$ah)
testData$ah <- revalue(testData$ah, c("FALSE"="Healthy", "TRUE"="ill"))
testData$twin <- as.factor(x=testData$twin)
testData$twin <- revalue(testData$twin, c("FALSE"="twin", "TRUE"="single"))
testData$gender <- as.factor(x=testData$gender)
testData$gender <- revalue(testData$gender, c("FALSE"="Male", "TRUE"="Female"))
testData$farm <- as.factor(x=testData$farm)
testData$farm <- revalue(testData$farm, c( "1"="Farm2"))
library(RWeka)
m1 <- J48(trainData$ngh~., data = trainData)
summary(m1);
#plot(m1, margin=0.1)
tahmin <- predict(m1, testData, type="class")
tahmin
table(testData$ngh, tahmin)
confMatrix <- table(tahmin, testData$ngh)
library(caret)
confusionMatrix(confMatrix)
####################################################
#postneonaatal#####
postneo <- dbGetQuery(con, "SELECT igg,ggt,lt,tp,alb,bw,twin,gender,farm,ah,perity,wgpn,mdgn,pngh from kanafter,kuzu,anne,postneonatal where kuzu.lambno=kanafter.kno and kuzu.ano=anne.no and kuzu.lambno=postneonatal.kno")
ind1 = sample(2, nrow(postneo), replace = TRUE, prob=c(0.7, 0.3))
trainData1 = postneo[ind1 == 1,]
testData1 = postneo[ind1 == 2,]
trainData1$pngh <- as.factor(x=trainData1$pngh)
trainData1$pngh <- revalue(trainData1$pngh,  c("FALSE"="Healthy", "TRUE"="ill"))
trainData1$ah <- as.factor(x=trainData1$ah)
trainData1$ah <- revalue(trainData1$ah, c("FALSE"="Healthy", "TRUE"="ill"))
trainData1$twin <- as.factor(x=trainData1$twin)
trainData1$twin <- revalue(trainData1$twin, c("FALSE"="twin", "TRUE"="single"))
trainData1$gender <- as.factor(x=trainData1$gender)
trainData1$gender <- revalue(trainData1$gender, c("FALSE"="Male", "TRUE"="Female"))
trainData1$farm <- as.factor(x=trainData1$farm)
trainData1$farm <- revalue(trainData1$farm, c("1"="Farm2"))
#-----Test data
testData1$pngh <- as.factor(x=testData1$pngh)
testData1$pngh <- revalue(testData1$pngh,  c("FALSE"="Healthy", "TRUE"="ill"))
testData1$ah <- as.factor(x=testData1$ah)
testData1$ah <- revalue(testData1$ah, c("FALSE"="Healthy", "TRUE"="ill"))
testData1$twin <- as.factor(x=testData1$twin)
testData1$twin <- revalue(testData1$twin, c("FALSE"="twin", "TRUE"="single"))
testData1$gender <- as.factor(x=testData1$gender)
testData1$gender <- revalue(testData1$gender, c("FALSE"="Male", "TRUE"="Female"))
testData1$farm <- as.factor(x=testData1$farm)
testData1$farm <- revalue(testData1$farm, c( "1"="Farm2"))
m2 <- J48(trainData1$pngh~., data = trainData1)
summary(m2);
tahmin1 <- predict(m2, testData1, type="class")
table(testData1$pngh, tahmin1)
confMatrix1 <- table(tahmin1, testData1$pngh)
confusionMatrix(confMatrix1)
######################################################
jpeg(filename="C:/Users/user/Desktop/Nodejs/examples/database/tree.jpg")
plot(m1, margin=0.1)
# plot(m1, type="simple")
dev.off()
jpeg(filename="C:/Users/user/Desktop/Nodejs/examples/database/posttree.jpg")
plot(m2, margin=0.1)
# plot(m2, type="simple")
dev.off()
body <- sprintf("Neonatal Dönem %s\nPostneonatal %s",summary(m1),summary(m2))
#      sprintf("%s\n %s",summary(m1),summary(m2))
##işlemlerr
#body <- toJSON(table(predict(iris_ctree), trainData$ngh),rnorm(2))# table için doğru sonuç döndü
}
ret <- list(status=status,
headers=headers,
body=body)
return(ret)
})
message("Starting server...")
server <- startServer("0.0.0.0", 8080, app=app) #127.0.0.1
on.exit(stopServer(server))
while(TRUE) {
service()
Sys.sleep(0.001)
}
stopServer(server)
rm(list = ls())
# server  #
library(httpuv)
library(RCurl)
library(httr)
## Veritabanı bağlantı
require("RPostgreSQL")
pw <- {
"6378"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "KuzuBase",
host = "localhost", port = 5432,
user = "postgres", password = 6378)
##
app <- list(call=function(req) {
query <- req$QUERY_STRING
qs <- httr:::parse_query(gsub("^\\?", "", query))
status <- 200L
headers <- list('Content-Type' = 'application/json')
if (!is.character(query) || identical(query, "")) {
## işlemler
df_postgres <- dbGetQuery(con, "SELECT igg,ggt,lt,tp,alb,bw,twin,gender,farm,ah,perity,wg28,mdg28,ngh from kanafter,kuzu,anne,neonatal where kuzu.lambno=kanafter.kno and kuzu.ano=anne.no and kuzu.lambno=neonatal.kno")
#####################################################
ind = sample(2, nrow(df_postgres), replace = TRUE, prob=c(0.7, 0.3))
trainData = df_postgres[ind == 1,]
testData = df_postgres[ind == 2,]
# numerik dısındakiler frame olarak tanimlanir
library(plyr)
trainData$ngh <- as.factor(x=trainData$ngh)
trainData$ngh <- revalue(trainData$ngh,  c("FALSE"="Healthy", "TRUE"="ill"))
trainData$ah <- as.factor(x=trainData$ah)
trainData$ah <- revalue(trainData$ah, c("FALSE"="Healthy", "TRUE"="ill"))
trainData$twin <- as.factor(x=trainData$twin)
trainData$twin <- revalue(trainData$twin, c("FALSE"="twin", "TRUE"="single"))
trainData$gender <- as.factor(x=trainData$gender)
trainData$gender <- revalue(trainData$gender, c("FALSE"="Male", "TRUE"="Female"))
trainData$farm <- as.factor(x=trainData$farm)
trainData$farm <- revalue(trainData$farm, c("1"="Farm2"))
#-----Test data
testData$ngh <- as.factor(x=testData$ngh)
testData$ngh <- revalue(testData$ngh,  c("FALSE"="Healthy", "TRUE"="ill"))
testData$ah <- as.factor(x=testData$ah)
testData$ah <- revalue(testData$ah, c("FALSE"="Healthy", "TRUE"="ill"))
testData$twin <- as.factor(x=testData$twin)
testData$twin <- revalue(testData$twin, c("FALSE"="twin", "TRUE"="single"))
testData$gender <- as.factor(x=testData$gender)
testData$gender <- revalue(testData$gender, c("FALSE"="Male", "TRUE"="Female"))
testData$farm <- as.factor(x=testData$farm)
testData$farm <- revalue(testData$farm, c( "1"="Farm2"))
library(RWeka)
m1 <- J48(trainData$ngh~., data = trainData)
summary(m1);
#plot(m1, margin=0.1)
tahmin <- predict(m1, testData, type="class")
tahmin
table(testData$ngh, tahmin)
confMatrix <- table(tahmin, testData$ngh)
library(caret)
confusionMatrix(confMatrix)
####################################################
#postneonaatal#####
postneo <- dbGetQuery(con, "SELECT igg,ggt,lt,tp,alb,bw,twin,gender,farm,ah,perity,wgpn,mdgn,pngh from kanafter,kuzu,anne,postneonatal where kuzu.lambno=kanafter.kno and kuzu.ano=anne.no and kuzu.lambno=postneonatal.kno")
ind1 = sample(2, nrow(postneo), replace = TRUE, prob=c(0.7, 0.3))
trainData1 = postneo[ind1 == 1,]
testData1 = postneo[ind1 == 2,]
trainData1$pngh <- as.factor(x=trainData1$pngh)
trainData1$pngh <- revalue(trainData1$pngh,  c("FALSE"="Healthy", "TRUE"="ill"))
trainData1$ah <- as.factor(x=trainData1$ah)
trainData1$ah <- revalue(trainData1$ah, c("FALSE"="Healthy", "TRUE"="ill"))
trainData1$twin <- as.factor(x=trainData1$twin)
trainData1$twin <- revalue(trainData1$twin, c("FALSE"="twin", "TRUE"="single"))
trainData1$gender <- as.factor(x=trainData1$gender)
trainData1$gender <- revalue(trainData1$gender, c("FALSE"="Male", "TRUE"="Female"))
trainData1$farm <- as.factor(x=trainData1$farm)
trainData1$farm <- revalue(trainData1$farm, c("1"="Farm2"))
#-----Test data
testData1$pngh <- as.factor(x=testData1$pngh)
testData1$pngh <- revalue(testData1$pngh,  c("FALSE"="Healthy", "TRUE"="ill"))
testData1$ah <- as.factor(x=testData1$ah)
testData1$ah <- revalue(testData1$ah, c("FALSE"="Healthy", "TRUE"="ill"))
testData1$twin <- as.factor(x=testData1$twin)
testData1$twin <- revalue(testData1$twin, c("FALSE"="twin", "TRUE"="single"))
testData1$gender <- as.factor(x=testData1$gender)
testData1$gender <- revalue(testData1$gender, c("FALSE"="Male", "TRUE"="Female"))
testData1$farm <- as.factor(x=testData1$farm)
testData1$farm <- revalue(testData1$farm, c( "1"="Farm2"))
m2 <- J48(trainData1$pngh~., data = trainData1)
summary(m2);
tahmin1 <- predict(m2, testData1, type="class")
table(testData1$pngh, tahmin1)
confMatrix1 <- table(tahmin1, testData1$pngh)
confusionMatrix(confMatrix1)
######################################################
jpeg(filename="C:/Users/user/Desktop/Nodejs/examples/database/tree.jpg")
plot(m1, margin=0.1)
# plot(m1, type="simple")
dev.off()
jpeg(filename="C:/Users/user/Desktop/Nodejs/examples/database/posttree.jpg")
plot(m2, margin=0.1)
# plot(m2, type="simple")
dev.off()
body <- sprintf("Neonatal Dönem %s\nPostneonatal %s",summary(m1),summary(m2))
#      sprintf("%s\n %s",summary(m1),summary(m2))
##işlemlerr
#body <- toJSON(table(predict(iris_ctree), trainData$ngh),rnorm(2))# table için doğru sonuç döndü
}
ret <- list(status=status,
headers=headers,
body=body)
return(ret)
})
message("Starting server...")
server <- startServer("0.0.0.0", 8080, app=app) #127.0.0.1
on.exit(stopServer(server))
while(TRUE) {
service()
Sys.sleep(0.001)
}
install.packages("Rscript")
install.packages('changepoint')
.libPaths()
ptm <- proc.time()
for (i in 1:50) mad(stats::runif(500))
proc.time() - ptm
rm( list = ls() )
ptm <- proc.time()
for (i in 1:50) mad(stats::runif(500))
proc.time() - ptm
setwd("C:\\Users\\user\\Desktop\\ACN\\scientific_Project\\Github\\Anomaly_Detection\\New\\KDD10Percentage\\V2\\DataV2\\window100")
library(EMD)
library(data.table)
library(dplyr)
library(RcppCNPy)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
str(x_prep)
ncol(x_prep)
cpuTimeList <- vector()
ptm <- proc.time()
for (i in 1:50) mad(stats::runif(500))
xx=proc.time() - ptm
cpuTimeList <- c(xx)
str(cpuTimeList)
cpuTimeList[1]
cpuTimeList[2]
cpuTimeList <- matrix(0L, nrow=5, 4)
str(cpuTimeList)
ptm <- proc.time()
for (i in 1:50) mad(stats::runif(500))
xx=proc.time() - ptm
cpuTimeList[1:5,1] = xx
View(cpuTimeList)
View(cpuTimeList)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
cpuTimeList <- matrix(0L, nrow=5, 4)
for (j in 1:ncol(x_prep)){
i=0
print(j)
ptm <- proc.time()
while ( i<window){
s=x_prep[((i*100)+1):(100*(i+1)),j]
#print("x1")
t=seq(100*i*2,(100*(i+1)*2)-2,2)
#print("x2")
res <- emd(xt=s,
tt=t, max.imf = 1)
#print("x3")
mat <- cbind(res$imf,res$residue)
#x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(res$imf)
x[((j*2) -1):((j*2)),((i*100)+1):((i*100)+100)] = t(mat)
#print("x4")
i=i+1
#print("x5")
}
xx=proc.time() - ptm
cpuTimeList[1:5,j] = xx
}
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
cpuTimeList <- matrix(0L, nrow=5, 4)
View(x)
View(x)
View(x)
str(x)
str(x_prep)
View(x_prep)
ncol(x_prep)
t=seq(0,(100*2)-2,2)
t[-1]
t
t[1]
t[100]
x_prep[1:200,1]
View(x_prep)
x_prep[1:100,1]
View(x_prep)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
cpuTimeList <- matrix(0L, nrow=5, 4)
t=seq(0,(100*2)-2,2)
for(j in 1:ncol(x_prep)){
ptm <- proc.time()
res <- emd(xt=x_prep[1:100,j],
tt=t, max.imf = 1)
xx=proc.time() - ptm
cpuTimeList[1:5,j] = xx
}
View(cpuTimeList)
View(x_prep)
x_prep[101:200,j]
x_prep[201:300,j]
res <- emd(xt=x_prep[201:300,j],
tt=t, max.imf = 1)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
cpuTimeList <- matrix(0L, nrow=5, 4)
t=seq(0,(100*2)-2,2)
for(j in 1:ncol(x_prep)){
ptm <- proc.time()
res <- emd(xt=x_prep[201:300,j],
tt=t, max.imf = 1)
xx=proc.time() - ptm
cpuTimeList[1:5,j] = xx
}
View(cpuTimeList)
xx
View(cpuTimeList)
1:ncol(x_prep)
for(j in 1:ncol(x_prep)){
print(j)
ptm <- proc.time()
res <- emd(xt=x_prep[201:300,j],
tt=t, max.imf = 1)
xx=proc.time() - ptm
cpuTimeList[1:5,j] = xx
}
cpuTimeList[1:5,j] = xx
View(cpuTimeList)
# Clear the workspace
rm( list = ls() )
data<-read.csv("../../../Data/kddcup.data_10_percent_corrected", stringsAsFactors = FALSE)
# Process the data
colnames <- read.table("../../../Data/kddcup.names", skip = 1, sep = ":")
names(data) <- colnames$V1
d <- dim(data)
names(data)[d[2]] <- "label"
#get 4 time-series data
x_prep=select(data, count, srv_count, dst_host_count, dst_host_srv_count)
x_prep=as.matrix(x_prep)
window = as.integer(nrow(x_prep)/100)
window=window - 1
x=matrix(0L, nrow=4*2, nrow(x_prep))
cpuTimeList <- matrix(0L, nrow=5, 4)
t=seq(0,(100*2)-2,2)
for(j in 1:ncol(x_prep)){
ptm <- proc.time()
res <- emd(xt=x_prep[201:300,j],
tt=t, max.imf = 1)
xx=proc.time() - ptm
cpuTimeList[1:5,j] = xx
}
View(cpuTimeList)
cpuTimeList = t(cpuTimeList)
View(cpuTimeList)
View(cpuTimeList)
colnames(cpuTimeList) <- c("User CPU Time","System CPU Time", "Elapsed","v1","v2")
View(cpuTimeList)
